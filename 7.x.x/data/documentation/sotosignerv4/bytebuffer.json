{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/sotosignerv4\/bytebuffer"]}],"hierarchy":{"paths":[["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4"]]},"kind":"symbol","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"roleHeading":"Structure","modules":[{"name":"SotoSignerV4"}],"navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"role":"symbol","symbolKind":"struct","externalID":"s:7NIOCore10ByteBufferV","title":"ByteBuffer"},"identifier":{"url":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","interfaceLanguage":"swift"},"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","doc:\/\/codes.soto.soto-core\/Se","doc:\/\/codes.soto.soto-core\/SE","doc:\/\/codes.soto.soto-core\/SQ","doc:\/\/codes.soto.soto-core\/SH","doc:\/\/codes.soto.soto-core\/s8SendableP"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Allocation","anchor":"Allocation","level":3},{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"allocator.buffer(capacity: desiredCapacity)","type":"codeVoice"},{"text":" to allocate a new ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","text":"Basic usage","anchor":"Basic-usage","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"A variety of types can be read\/written from\/to a "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". Using Swift’s "},{"code":"extension","type":"codeVoice"},{"type":"text","text":" mechanism you can easily"},{"type":"text","text":" "},{"type":"text","text":"create "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" support for your own data types. Out of the box, "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" supports for example the following"},{"type":"text","text":" "},{"type":"text","text":"types (non-exhaustive list):"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"StaticString","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s various (unsigned) integer types"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Foundation"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"Data"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"[UInt8]","type":"codeVoice"},{"type":"text","text":" and generally any "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" of "},{"code":"UInt8","type":"codeVoice"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The best and easiest way to read and convert "},{"isActive":true,"type":"reference","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer"},{"type":"text","text":" into a "},{"code":"String","type":"codeVoice"},{"type":"text","text":",  "},{"code":"Array<UInt8>","type":"codeVoice"},{"type":"text","text":", or "},{"code":"Data","type":"codeVoice"},{"type":"text","text":" is by"},{"type":"text","text":" "},{"type":"text","text":"passing the buffer to an initializer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":null,"code":["let buf = ...","let myString = String(buffer: buf)"]},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" provides APIs for reading its contents either sequentially (","type":"text"},{"code":"read*","type":"codeVoice"},{"text":" methods) or randomly (","type":"text"},{"code":"get*","type":"codeVoice"},{"text":" ","type":"text"},{"text":"methods). All ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the readable","type":"text"},{"text":" ","type":"text"},{"text":"bytes of the buffer, i.e. ","type":"text"},{"code":"readerIndex ..< writerIndex","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to loop over all the bytes in the buffer, you can use the "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" conformance with "},{"type":"codeVoice","code":"readableBytesView"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":null,"code":["for byte in buffer.readableBytesView {","    print(byte)","}"]},{"type":"paragraph","inlineContent":[{"text":"If you need to process the whole buffer front to back, it’s recommended that you use sequential ","type":"text"},{"type":"codeVoice","code":"read*"},{"text":" methods:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["while buffer.readableBytes > 0 {","    if let chunk = buffer.readBytes(length: min(chunkSize, buffer.readableBytes) {","        \/\/ work with the chunk of data","    } else {","        \/\/ fallback in case of buffer read error.","    }","}"]},{"type":"heading","text":"Random Access","anchor":"Random-Access","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"For every supported type "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for random access:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"get<Type>(at: Int, length: Int)","type":"codeVoice"},{"type":"text","text":" where "},{"code":"<type>","type":"codeVoice"},{"type":"text","text":" is for example "},{"code":"String","type":"codeVoice"},{"type":"text","text":", "},{"code":"Data","type":"codeVoice"},{"type":"text","text":", "},{"code":"Bytes","type":"codeVoice"},{"type":"text","text":" (for "},{"code":"[UInt8]","type":"codeVoice"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"set<Type>(at: Int)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":null,"code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed, "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" will automatically resize its storage to accommodate your "},{"code":"set","type":"codeVoice"},{"type":"text","text":" request."}]},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If you need to access the contents of a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"get*(at: index)","type":"codeVoice"},{"text":" methods, make sure that the","type":"text"},{"text":" ","type":"text"},{"code":"index","type":"codeVoice"},{"text":" you’re passing in is within the readable bytes range. If you try to access an index outside","type":"text"},{"text":" ","type":"text"},{"code":"readerIndex ..< writerIndex","type":"codeVoice"},{"text":" range, ","type":"text"},{"code":"get*","type":"codeVoice"},{"text":" methods will return ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". For most applications, initializing","type":"text"},{"text":" ","type":"text"},{"text":"the desired type with the contents of the buffer, or using one of the ","type":"text"},{"code":"read*","type":"codeVoice"},{"text":" is a better approach.","type":"text"}]}],"style":"note"},{"type":"heading","text":"Sequential Access","anchor":"Sequential-Access","level":3},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" provides two properties which are indices into the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to support sequential access:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":", the index of the next readable byte"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":", the index of the next byte to write"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For every supported type "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for sequential access:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"read<Type>(length: Int)"},{"type":"text","text":" to read "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes from the current "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" (and then advance the reader"},{"type":"text","text":" "},{"type":"text","text":"index by "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"write<Type>(Type)"},{"text":" to write, advancing the ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"text":" by the appropriate amount","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"type":"codeListing","syntax":null,"code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"]},{"type":"heading","text":"Layout","anchor":"Layout","level":3},{"type":"codeListing","syntax":null,"code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"]},{"type":"paragraph","inlineContent":[{"text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using","type":"text"},{"text":" ","type":"text"},{"text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential","type":"text"},{"text":" ","type":"text"},{"text":"access interface (","type":"text"},{"type":"codeVoice","code":"read<Type>"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"write<Type>"},{"text":"). Getting ","type":"text"},{"type":"codeVoice","code":"writableBytes"},{"text":" (bytes beyond the writer index) is undefined","type":"text"},{"text":" ","type":"text"},{"text":"behaviour and might yield arbitrary bytes (","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"0"},{"text":" initialised).","type":"text"}]},{"type":"heading","text":"Slicing","anchor":"Slicing","level":3},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" supports slicing a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" without copying the underlying storage."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":null,"code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"]}]}],"sections":[],"topicSections":[{"anchor":"Instance-Properties","title":"Instance Properties","identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex"],"generated":true},{"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/peekSlice(length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"],"generated":true}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-12w71":{"kind":"symbol","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"code":"0","type":"codeVoice"},{"type":"text","text":". This will reset the state of this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"role":"symbol","title":"clear(minimumCapacity:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-12w71"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/discardReadBytes()":{"title":"discardReadBytes()","role":"symbol","abstract":[{"type":"text","text":"Discard the bytes before the reader index. The byte at index "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" before calling this method will be"},{"type":"text","text":" "},{"type":"text","text":"at index "},{"code":"0","type":"codeVoice"},{"type":"text","text":" after the call returns."}],"kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/discardreadbytes()","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"discardReadBytes"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/peekSlice(length:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"peekSlice"},{"kind":"text","text":"("},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":"?"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/peekslice(length:)","title":"peekSlice(length:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/peekSlice(length:)","type":"topic","abstract":[{"type":"text","text":"Returns a slice of size "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes, starting at the current "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":". The "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" this is invoked on"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" in this"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will correspond to index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" in the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" of the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will be "},{"type":"codeVoice","code":"0"},{"type":"text","text":", the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" will be "},{"type":"codeVoice","code":"length"},{"type":"text","text":"."}],"kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(minimumwritablebytes:)","type":"topic","kind":"symbol","abstract":[{"text":"Reserves enough space to write at least the specified number of bytes.","type":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","role":"symbol","title":"reserveCapacity(minimumWritableBytes:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reserveCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumWritableBytes","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablereadablebytes(_:)","title":"withUnsafeMutableReadableBytes(_:)","role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","kind":"symbol","abstract":[{"text":"Yields a mutable buffer pointer containing this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"’s readable bytes. You may modify those bytes.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableReadableBytes"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"title":"withUnsafeMutableWritableBytes(_:)","role":"symbol","abstract":[{"text":"Yields the bytes currently writable (","type":"text"},{"type":"codeVoice","code":"bytesWritable"},{"text":" = ","type":"text"},{"type":"codeVoice","code":"capacity"},{"text":" - ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"text":"). Before reading those bytes you must first","type":"text"},{"text":" ","type":"text"},{"text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablewritablebytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeMutableWritableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sw"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/capacity":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/capacity","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"capacity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","title":"capacity","abstract":[{"type":"text","text":"The current capacity of the storage of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":", this is not constant and does "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" signify the number"},{"type":"text","text":" "},{"type":"text","text":"of bytes that have been written to this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeBytesWithStorageManagement"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV","text":"Unmanaged"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta","text":"AnyObject"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)","title":"withVeryUnsafeBytesWithStorageManagement(_:)","type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","abstract":[{"type":"text","text":"See "},{"type":"codeVoice","code":"withUnsafeReadableBytesWithStorageManagement"},{"type":"text","text":" and "},{"type":"codeVoice","code":"withVeryUnsafeBytes"},{"type":"text","text":"."}],"kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"deprecated":true,"url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"text":"((","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","title":"writeWithUnsafeMutableBytes(_:)","abstract":[]},"doc://codes.soto.soto-core/SH":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SH","title":"Swift.Hashable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"title":"withUnsafeReadableBytesWithStorageManagement(_:)","role":"symbol","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"‘s readable bytes. You may hold a pointer to those bytes"},{"type":"text","text":" "},{"type":"text","text":"even after the closure returned iff you model the lifetime of those bytes correctly using the "},{"code":"Unmanaged","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"instance. If you don’t require the pointer after the closure returns, use "},{"code":"withUnsafeReadableBytes","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeReadableBytesWithStorageManagement"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AnyObject","preciseIdentifier":"s:s9AnyObjecta"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}]},"doc://codes.soto.soto-core/Se":{"title":"Swift.Decodable","identifier":"doc:\/\/codes.soto.soto-core\/Se","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear()":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/clear()","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","role":"symbol","title":"clear()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://codes.soto.soto-core/SQ":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SQ","title":"Swift.Equatable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-7qskn":{"title":"clear(minimumCapacity:)","role":"symbol","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-7qskn","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumCapacity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier","text":"UInt32"},{"kind":"text","text":")"}],"deprecated":true},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"title":"withVeryUnsafeMutableBytes(_:)","role":"symbol","abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". It’s marked as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"very unsafe"}]},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"type":"codeVoice","code":"withUnsafeMutableWritableBytes"},{"type":"text","text":"."}],"kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafemutablebytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeMutableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sw"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writableBytes":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"writableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"title":"writableBytes","url":"\/documentation\/sotosignerv4\/bytebuffer\/writablebytes","type":"topic","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","abstract":[{"text":"The number of bytes writable until ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will need to grow its underlying storage which will likely","type":"text"},{"text":" ","type":"text"},{"text":"trigger a copy of the bytes.","type":"text"}],"role":"symbol"},"doc://codes.soto.soto-core/s28CustomDebugStringConvertibleP":{"title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/storageCapacity":{"kind":"symbol","abstract":[{"type":"text","text":"The current capacity of the underlying storage of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original"},{"type":"text","text":" "},{"type":"text","text":"buffer until new data is written."}],"role":"symbol","title":"storageCapacity","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"storageCapacity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/storagecapacity","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytes(_:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebytes(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","title":"withUnsafeReadableBytes(_:)","abstract":[{"text":"Yields a buffer pointer containing this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"’s readable bytes.","type":"text"}]},"doc://codes.soto.soto-core/SE":{"title":"Swift.Encodable","type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SE"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readerIndex":{"kind":"symbol","abstract":[{"type":"text","text":"The reader index or the number of bytes previously read from this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" is "},{"code":"0","type":"codeVoice"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","title":"readerIndex","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readerIndex","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/readerindex","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writerIndex":{"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/writerindex","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerIndex"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"role":"symbol","abstract":[{"type":"text","text":"The write index or the number of bytes previously written to this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex","title":"writerIndex"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/getSlice(at:length:)":{"kind":"symbol","title":"getSlice(at:length:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","role":"symbol","type":"topic","abstract":[{"text":"Returns a slice of size ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" bytes, starting at ","type":"text"},{"code":"index","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" this is invoked on and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"type":"codeVoice","code":"index"},{"type":"text","text":" in this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"will correspond to index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" in the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" of the returned ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will be ","type":"text"},{"code":"0","type":"codeVoice"},{"text":", the ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":" will be ","type":"text"},{"code":"length","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/getslice(at:length:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getSlice"},{"kind":"text","text":"("},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"text":"?","kind":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/shrinkBufferCapacity(to:)":{"kind":"symbol","title":"shrinkBufferCapacity(to:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will successfully be shrunk if the requested capacity is less than the current capacity,"},{"type":"text","text":" "},{"type":"text","text":"and the requested capacity is greater than or equal to the number of readable bytes in the buffer."},{"type":"text","text":" "},{"type":"text","text":"If either condition is not true, the buffer will not be shrunk."}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/shrinkbuffercapacity(to:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shrinkBufferCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytes(_:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebytes(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","title":"withVeryUnsafeBytes(_:)","abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". It’s marked as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"very unsafe"}]},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(_:)":{"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":")"}],"role":"symbol","abstract":[{"text":"Reserves enough space to store the specified number of bytes.","type":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","title":"reserveCapacity(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readableBytes":{"title":"readableBytes","role":"symbol","abstract":[{"type":"text","text":"The number of bytes readable ("},{"type":"codeVoice","code":"readableBytes"},{"type":"text","text":" = "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" - "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":")."}],"kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/readablebytes","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"readableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer":{"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer","title":"ByteBuffer","role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","kind":"symbol","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}]},"doc://codes.soto.soto-core/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/codes.soto.soto-core\/s8SendableP","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writeWithUnsafeMutableBytes"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumWritableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)","title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","abstract":[{"text":"This vends a pointer of the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" at the ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":" after ensuring that the buffer has at least ","type":"text"},{"code":"minimumWritableBytes","type":"codeVoice"},{"text":" of writable bytes available.","type":"text"}],"kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4":{"title":"SotoSignerV4","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4","type":"topic","url":"\/documentation\/sotosignerv4","abstract":[{"type":"text","text":"Sign HTTP requests before sending them to AWS either by generating a signed URL or a set of signed headers."}],"kind":"symbol","role":"collection"},"doc://codes.soto.soto-core/s23CustomStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomStringConvertible","identifier":"doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP"}}}