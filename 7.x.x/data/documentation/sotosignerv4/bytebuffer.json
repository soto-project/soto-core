{"topicSections":[{"anchor":"Instance-Properties","generated":true,"identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex"],"title":"Instance Properties"},{"anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/peekSlice(length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"],"title":"Instance Methods"}],"sections":[],"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"relationshipsSections":[{"type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","doc:\/\/codes.soto.soto-core\/Se","doc:\/\/codes.soto.soto-core\/SE","doc:\/\/codes.soto.soto-core\/SQ","doc:\/\/codes.soto.soto-core\/SH","doc:\/\/codes.soto.soto-core\/s8SendableP"],"title":"Conforms To"}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"externalID":"s:7NIOCore10ByteBufferV","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ByteBuffer"}],"modules":[{"name":"SotoSignerV4"}],"title":"ByteBuffer","roleHeading":"Structure","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"symbolKind":"struct"},"hierarchy":{"paths":[["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}]}]},{"kind":"content","content":[{"level":3,"text":"Allocation","anchor":"Allocation","type":"heading"},{"inlineContent":[{"type":"text","text":"Use "},{"code":"allocator.buffer(capacity: desiredCapacity)","type":"codeVoice"},{"type":"text","text":" to allocate a new "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"text":"Basic usage","anchor":"Basic-usage","type":"heading"},{"inlineContent":[{"type":"text","text":"A variety of types can be read\/written from\/to a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". Using Swift’s "},{"type":"codeVoice","code":"extension"},{"type":"text","text":" mechanism you can easily"},{"type":"text","text":" "},{"type":"text","text":"create "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" support for your own data types. Out of the box, "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" supports for example the following"},{"type":"text","text":" "},{"type":"text","text":"types (non-exhaustive list):"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"String","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"StaticString","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s various (unsigned) integer types","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Foundation","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"Data","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"[UInt8]","type":"codeVoice"},{"text":" and generally any ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":" of ","type":"text"},{"code":"UInt8","type":"codeVoice"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The best and easiest way to read and convert "},{"type":"reference","isActive":true,"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"String"},{"type":"text","text":",  "},{"type":"codeVoice","code":"Array<UInt8>"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" is by"},{"type":"text","text":" "},{"type":"text","text":"passing the buffer to an initializer."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"syntax":null,"code":["let buf = ...","let myString = String(buffer: buf)"],"type":"codeListing"},{"inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" provides APIs for reading its contents either sequentially ("},{"type":"codeVoice","code":"read*"},{"type":"text","text":" methods) or randomly ("},{"type":"codeVoice","code":"get*"},{"type":"text","text":" "},{"type":"text","text":"methods). All "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the readable"},{"type":"text","text":" "},{"type":"text","text":"bytes of the buffer, i.e. "},{"type":"codeVoice","code":"readerIndex ..< writerIndex"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you need to loop over all the bytes in the buffer, you can use the "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" conformance with "},{"code":"readableBytesView","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":null,"code":["for byte in buffer.readableBytesView {","    print(byte)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you need to process the whole buffer front to back, it’s recommended that you use sequential "},{"type":"codeVoice","code":"read*"},{"type":"text","text":" methods:"}],"type":"paragraph"},{"syntax":null,"code":["while buffer.readableBytes > 0 {","    if let chunk = buffer.readBytes(length: min(chunkSize, buffer.readableBytes) {","        \/\/ work with the chunk of data","    } else {","        \/\/ fallback in case of buffer read error.","    }","}"],"type":"codeListing"},{"level":3,"text":"Random Access","anchor":"Random-Access","type":"heading"},{"inlineContent":[{"text":"For every supported type ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" usually contains two methods for random access:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"get<Type>(at: Int, length: Int)"},{"text":" where ","type":"text"},{"type":"codeVoice","code":"<type>"},{"text":" is for example ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Bytes"},{"text":" (for ","type":"text"},{"type":"codeVoice","code":"[UInt8]"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"set<Type>(at: Int)","type":"codeVoice"}]}]}],"type":"orderedList"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"syntax":null,"code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"],"type":"codeListing"},{"inlineContent":[{"text":"If needed, ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" will automatically resize its storage to accommodate your ","type":"text"},{"type":"codeVoice","code":"set"},{"text":" request.","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"text":"If you need to access the contents of a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"get*(at: index)"},{"text":" methods, make sure that the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"index"},{"text":" you’re passing in is within the readable bytes range. If you try to access an index outside","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"readerIndex ..< writerIndex"},{"text":" range, ","type":"text"},{"type":"codeVoice","code":"get*"},{"text":" methods will return ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":". For most applications, initializing","type":"text"},{"text":" ","type":"text"},{"text":"the desired type with the contents of the buffer, or using one of the ","type":"text"},{"type":"codeVoice","code":"read*"},{"text":" is a better approach.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"},{"level":3,"text":"Sequential Access","anchor":"Sequential-Access","type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" provides two properties which are indices into the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to support sequential access:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"readerIndex"},{"text":", the index of the next readable byte","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":", the index of the next byte to write"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"For every supported type ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" usually contains two methods for sequential access:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"read<Type>(length: Int)"},{"type":"text","text":" to read "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes from the current "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" (and then advance the reader"},{"type":"text","text":" "},{"type":"text","text":"index by "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"write<Type>(Type)","type":"codeVoice"},{"text":" to write, advancing the ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":" by the appropriate amount","type":"text"}]}]}],"type":"orderedList"},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"],"type":"codeListing"},{"level":3,"text":"Layout","anchor":"Layout","type":"heading"},{"syntax":null,"code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"],"type":"codeListing"},{"inlineContent":[{"text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using","type":"text"},{"text":" ","type":"text"},{"text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential","type":"text"},{"text":" ","type":"text"},{"text":"access interface (","type":"text"},{"code":"read<Type>","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"write<Type>","type":"codeVoice"},{"text":"). Getting ","type":"text"},{"code":"writableBytes","type":"codeVoice"},{"text":" (bytes beyond the writer index) is undefined","type":"text"},{"text":" ","type":"text"},{"text":"behaviour and might yield arbitrary bytes (","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" initialised).","type":"text"}],"type":"paragraph"},{"level":3,"text":"Slicing","anchor":"Slicing","type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"text":" supports slicing a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" without copying the underlying storage.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"syntax":null,"code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"],"type":"codeListing"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer"},"variants":[{"paths":["\/documentation\/sotosignerv4\/bytebuffer"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-7qskn":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-7qskn","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","title":"clear(minimumCapacity:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"minimumCapacity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier","text":"UInt32"},{"kind":"text","text":")"}],"deprecated":true,"abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear()":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","title":"clear()","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/clear()","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"code":"0","type":"codeVoice"},{"type":"text","text":". This will reset the state of this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafemutablebytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","title":"withVeryUnsafeMutableBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeMutableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"text":"This vends a pointer to the storage of the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":". It’s marked as ","type":"text"},{"inlineContent":[{"type":"text","text":"very unsafe"}],"type":"emphasis"},{"text":" because it might contain","type":"text"},{"text":" ","type":"text"},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"code":"withUnsafeMutableWritableBytes","type":"codeVoice"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/Se":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/Se","title":"Swift.Decodable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","title":"reserveCapacity(minimumWritableBytes:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reserveCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumWritableBytes","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(minimumwritablebytes:)","abstract":[{"text":"Reserves enough space to write at least the specified number of bytes.","type":"text"}]},"doc://codes.soto.soto-core/SH":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SH","title":"Swift.Hashable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readableBytes":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/readablebytes","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","title":"readableBytes","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readableBytes","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The number of bytes readable ("},{"type":"codeVoice","code":"readableBytes"},{"type":"text","text":" = "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" - "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":")."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","deprecated":true,"title":"writeWithUnsafeMutableBytes(_:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writeWithUnsafeMutableBytes"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(_:)","abstract":[]},"doc://codes.soto.soto-core/SE":{"identifier":"doc:\/\/codes.soto.soto-core\/SE","type":"unresolvable","title":"Swift.Encodable"},"doc://codes.soto.soto-core/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/s8SendableP","title":"Swift.Sendable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","title":"withVeryUnsafeBytesWithStorageManagement(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeBytesWithStorageManagement"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:SW","kind":"typeIdentifier","text":"UnsafeRawBufferPointer"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s9UnmanagedV","kind":"typeIdentifier","text":"Unmanaged"},{"text":"<","kind":"text"},{"text":"AnyObject","kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"text":"See ","type":"text"},{"code":"withUnsafeReadableBytesWithStorageManagement","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"withVeryUnsafeBytes","type":"codeVoice"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytes(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","title":"withUnsafeReadableBytes(_:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebytes(_:)","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-12w71":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-12w71","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","title":"clear(minimumCapacity:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}]},"doc://codes.soto.soto-core/s28CustomDebugStringConvertibleP":{"title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","title":"withUnsafeReadableBytesWithStorageManagement(_:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AnyObject","preciseIdentifier":"s:s9AnyObjecta"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","abstract":[{"text":"Yields a buffer pointer containing this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"‘s readable bytes. You may hold a pointer to those bytes","type":"text"},{"text":" ","type":"text"},{"text":"even after the closure returned iff you model the lifetime of those bytes correctly using the ","type":"text"},{"code":"Unmanaged","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"instance. If you don’t require the pointer after the closure returns, use "},{"code":"withUnsafeReadableBytes","type":"codeVoice"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readerIndex":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/readerindex","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","title":"readerIndex","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readerIndex","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"text":"The reader index or the number of bytes previously read from this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":". ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/s23CustomStringConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/storageCapacity":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","title":"storageCapacity","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"storageCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/storagecapacity","abstract":[{"text":"The current capacity of the underlying storage of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original","type":"text"},{"text":" ","type":"text"},{"text":"buffer until new data is written.","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4":{"type":"topic","kind":"symbol","title":"SotoSignerV4","role":"collection","url":"\/documentation\/sotosignerv4","abstract":[{"text":"Sign HTTP requests before sending them to AWS either by generating a signed URL or a set of signed headers.","type":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/discardReadBytes()":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"discardReadBytes","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Discard the bytes before the reader index. The byte at index "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" before calling this method will be"},{"type":"text","text":" "},{"type":"text","text":"at index "},{"code":"0","type":"codeVoice"},{"type":"text","text":" after the call returns."}],"title":"discardReadBytes()","url":"\/documentation\/sotosignerv4\/bytebuffer\/discardreadbytes()","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/shrinkBufferCapacity(to:)":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/shrinkbuffercapacity(to:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","title":"shrinkBufferCapacity(to:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shrinkBufferCapacity"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will successfully be shrunk if the requested capacity is less than the current capacity,"},{"type":"text","text":" "},{"type":"text","text":"and the requested capacity is greater than or equal to the number of readable bytes in the buffer."},{"type":"text","text":" "},{"text":"If either condition is not true, the buffer will not be shrunk.","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","title":"reserveCapacity(_:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(_:)","abstract":[{"text":"Reserves enough space to store the specified number of bytes.","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/capacity":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/capacity","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","title":"capacity","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"capacity","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The current capacity of the storage of this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":", this is not constant and does "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" signify the number"},{"text":" ","type":"text"},{"text":"of bytes that have been written to this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumWritableBytes","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", (","kind":"text"},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)","abstract":[{"type":"text","text":"This vends a pointer of the "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" at the "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" after ensuring that the buffer has at least "},{"code":"minimumWritableBytes","type":"codeVoice"},{"text":" of writable bytes available.","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/peekSlice(length:)":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/peekslice(length:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/peekSlice(length:)","title":"peekSlice(length:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"peekSlice","kind":"identifier"},{"text":"(","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"text":"Returns a slice of size ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" bytes, starting at the current ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" this is invoked on"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" in this"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will correspond to index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" in the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" of the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will be "},{"type":"codeVoice","code":"0"},{"type":"text","text":", the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" will be "},{"type":"codeVoice","code":"length"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","title":"withUnsafeMutableWritableBytes(_:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeMutableWritableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablewritablebytes(_:)","abstract":[{"type":"text","text":"Yields the bytes currently writable ("},{"type":"codeVoice","code":"bytesWritable"},{"type":"text","text":" = "},{"type":"codeVoice","code":"capacity"},{"type":"text","text":" - "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":"). Before reading those bytes you must first"},{"type":"text","text":" "},{"type":"text","text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writerIndex":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/writerindex","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex","title":"writerIndex","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerIndex"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The write index or the number of bytes previously written to this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","title":"withUnsafeMutableReadableBytes(_:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableReadableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablereadablebytes(_:)","abstract":[{"type":"text","text":"Yields a mutable buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes. You may modify those bytes."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytes(_:)":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","title":"withVeryUnsafeBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeBytes"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". It’s marked as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"very unsafe"}]},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/getSlice(at:length:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","title":"getSlice(at:length:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getSlice","kind":"identifier"},{"text":"(","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/getslice(at:length:)","abstract":[{"text":"Returns a slice of size ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" bytes, starting at ","type":"text"},{"code":"index","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" this is invoked on and the","type":"text"},{"text":" ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" returned will share the same underlying storage. However, the byte at ","type":"text"},{"code":"index","type":"codeVoice"},{"text":" in this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"will correspond to index "},{"code":"0","type":"codeVoice"},{"type":"text","text":" in the returned "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" of the returned "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" will be "},{"code":"0","type":"codeVoice"},{"type":"text","text":", the "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" will be "},{"code":"length","type":"codeVoice"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"kind":"symbol","title":"ByteBuffer","role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writableBytes":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/writablebytes","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","title":"writableBytes","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"writableBytes","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"The number of bytes writable until "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will need to grow its underlying storage which will likely"},{"type":"text","text":" "},{"type":"text","text":"trigger a copy of the bytes."}]},"doc://codes.soto.soto-core/SQ":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SQ","title":"Swift.Equatable"}}}