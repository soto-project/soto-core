{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/sotosignerv4\/bytebuffer"]}],"kind":"symbol","identifier":{"url":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4"]]},"metadata":{"symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"roleHeading":"Structure","title":"ByteBuffer","role":"symbol","modules":[{"name":"SotoSignerV4"}],"externalID":"s:7NIOCore10ByteBufferV"},"topicSections":[{"anchor":"Instance-Properties","title":"Instance Properties","generated":true,"identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex"]},{"anchor":"Instance-Methods","title":"Instance Methods","generated":true,"identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/peekSlice(length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"]}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","doc:\/\/codes.soto.soto-core\/Se","doc:\/\/codes.soto.soto-core\/SE","doc:\/\/codes.soto.soto-core\/SQ","doc:\/\/codes.soto.soto-core\/SH","doc:\/\/codes.soto.soto-core\/s8SendableP"]}],"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"level":3,"text":"Allocation","type":"heading","anchor":"Allocation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"allocator.buffer(capacity: desiredCapacity)"},{"type":"text","text":" to allocate a new "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}]},{"level":3,"text":"Basic usage","type":"heading","anchor":"Basic-usage"},{"type":"paragraph","inlineContent":[{"text":"A variety of types can be read\/written from\/to a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":". Using Swift’s ","type":"text"},{"type":"codeVoice","code":"extension"},{"text":" mechanism you can easily","type":"text"},{"text":" ","type":"text"},{"text":"create ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" support for your own data types. Out of the box, ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" supports for example the following","type":"text"},{"text":" ","type":"text"},{"text":"types (non-exhaustive list):","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"code":"String","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"StaticString","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s various (unsigned) integer types"}]}]},{"content":[{"inlineContent":[{"code":"Foundation","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Data","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"[UInt8]"},{"text":" and generally any ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":" of ","type":"text"},{"type":"codeVoice","code":"UInt8"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The best and easiest way to read and convert "},{"type":"reference","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","isActive":true},{"type":"text","text":" into a "},{"type":"codeVoice","code":"String"},{"type":"text","text":",  "},{"type":"codeVoice","code":"Array<UInt8>"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" is by"},{"type":"text","text":" "},{"type":"text","text":"passing the buffer to an initializer."}]},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"code":["let buf = ...","let myString = String(buffer: buf)"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" provides APIs for reading its contents either sequentially (","type":"text"},{"code":"read*","type":"codeVoice"},{"text":" methods) or randomly (","type":"text"},{"code":"get*","type":"codeVoice"},{"text":" ","type":"text"},{"text":"methods). All ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the readable","type":"text"},{"text":" ","type":"text"},{"text":"bytes of the buffer, i.e. ","type":"text"},{"code":"readerIndex ..< writerIndex","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to loop over all the bytes in the buffer, you can use the "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" conformance with "},{"type":"codeVoice","code":"readableBytesView"},{"type":"text","text":":"}]},{"code":["for byte in buffer.readableBytesView {","    print(byte)","}"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"If you need to process the whole buffer front to back, it’s recommended that you use sequential ","type":"text"},{"code":"read*","type":"codeVoice"},{"text":" methods:","type":"text"}]},{"code":["while buffer.readableBytes > 0 {","    if let chunk = buffer.readBytes(length: min(chunkSize, buffer.readableBytes) {","        \/\/ work with the chunk of data","    } else {","        \/\/ fallback in case of buffer read error.","    }","}"],"type":"codeListing","syntax":null},{"level":3,"text":"Random Access","type":"heading","anchor":"Random-Access"},{"type":"paragraph","inlineContent":[{"text":"For every supported type ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" usually contains two methods for random access:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"get<Type>(at: Int, length: Int)"},{"text":" where ","type":"text"},{"type":"codeVoice","code":"<type>"},{"text":" is for example ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Bytes"},{"text":" (for ","type":"text"},{"type":"codeVoice","code":"[UInt8]"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"set<Type>(at: Int)","type":"codeVoice"}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed, "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will automatically resize its storage to accommodate your "},{"type":"codeVoice","code":"set"},{"type":"text","text":" request."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to access the contents of a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" with "},{"type":"codeVoice","code":"get*(at: index)"},{"type":"text","text":" methods, make sure that the"},{"type":"text","text":" "},{"type":"codeVoice","code":"index"},{"type":"text","text":" you’re passing in is within the readable bytes range. If you try to access an index outside"},{"type":"text","text":" "},{"type":"codeVoice","code":"readerIndex ..< writerIndex"},{"type":"text","text":" range, "},{"type":"codeVoice","code":"get*"},{"type":"text","text":" methods will return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". For most applications, initializing"},{"type":"text","text":" "},{"type":"text","text":"the desired type with the contents of the buffer, or using one of the "},{"type":"codeVoice","code":"read*"},{"type":"text","text":" is a better approach."}]}],"name":"Note","type":"aside","style":"note"},{"level":3,"text":"Sequential Access","type":"heading","anchor":"Sequential-Access"},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" provides two properties which are indices into the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to support sequential access:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":", the index of the next readable byte"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":", the index of the next byte to write"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For every supported type ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" usually contains two methods for sequential access:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"read<Type>(length: Int)"},{"type":"text","text":" to read "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes from the current "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" (and then advance the reader"},{"type":"text","text":" "},{"type":"text","text":"index by "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"write<Type>(Type)"},{"type":"text","text":" to write, advancing the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" by the appropriate amount"}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"],"type":"codeListing","syntax":null},{"level":3,"text":"Layout","type":"heading","anchor":"Layout"},{"code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using"},{"type":"text","text":" "},{"type":"text","text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential"},{"type":"text","text":" "},{"type":"text","text":"access interface ("},{"code":"read<Type>","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"write<Type>","type":"codeVoice"},{"type":"text","text":"). Getting "},{"code":"writableBytes","type":"codeVoice"},{"type":"text","text":" (bytes beyond the writer index) is undefined"},{"type":"text","text":" "},{"type":"text","text":"behaviour and might yield arbitrary bytes ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" "},{"code":"0","type":"codeVoice"},{"type":"text","text":" initialised)."}]},{"level":3,"text":"Slicing","type":"heading","anchor":"Slicing"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"text":" supports slicing a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" without copying the underlying storage.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"],"type":"codeListing","syntax":null}]}],"references":{"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-7qskn":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumCapacity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier","text":"UInt32"},{"kind":"text","text":")"}],"deprecated":true,"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-7qskn","title":"clear(minimumCapacity:)","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytes(_:)":{"kind":"symbol","title":"withVeryUnsafeBytes(_:)","abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". It’s marked as "},{"type":"emphasis","inlineContent":[{"text":"very unsafe","type":"text"}]},{"type":"text","text":" because it might contain"},{"text":" ","type":"text"},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"code":"withUnsafeReadableBytes","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/discardReadBytes()":{"kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"discardReadBytes","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"title":"discardReadBytes()","type":"topic","role":"symbol","abstract":[{"text":"Discard the bytes before the reader index. The byte at index ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" before calling this method will be","type":"text"},{"text":" ","type":"text"},{"text":"at index ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" after the call returns.","type":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/discardreadbytes()"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/getSlice(at:length:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getSlice","kind":"identifier"},{"text":"(","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","abstract":[{"type":"text","text":"Returns a slice of size "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes, starting at "},{"type":"codeVoice","code":"index"},{"type":"text","text":". The "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" this is invoked on and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"type":"codeVoice","code":"index"},{"type":"text","text":" in this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"will correspond to index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" in the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" of the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will be "},{"type":"codeVoice","code":"0"},{"type":"text","text":", the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" will be "},{"type":"codeVoice","code":"length"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/getslice(at:length:)","title":"getSlice(at:length:)","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readableBytes":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","title":"readableBytes","role":"symbol","abstract":[{"type":"text","text":"The number of bytes readable ("},{"code":"readableBytes","type":"codeVoice"},{"type":"text","text":" = "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" - "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":")."}],"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readableBytes","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/readablebytes","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"kind":"symbol","title":"withUnsafeReadableBytesWithStorageManagement(_:)","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"‘s readable bytes. You may hold a pointer to those bytes"},{"type":"text","text":" "},{"type":"text","text":"even after the closure returned iff you model the lifetime of those bytes correctly using the "},{"type":"codeVoice","code":"Unmanaged"},{"type":"text","text":" "},{"type":"text","text":"instance. If you don’t require the pointer after the closure returns, use "},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"text":", ","kind":"text"},{"text":"Unmanaged","kind":"typeIdentifier","preciseIdentifier":"s:s9UnmanagedV"},{"text":"<","kind":"text"},{"text":"AnyObject","kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writerIndex":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerIndex"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"title":"writerIndex","type":"topic","role":"symbol","abstract":[{"type":"text","text":"The write index or the number of bytes previously written to this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" is "},{"code":"0","type":"codeVoice"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/writerindex"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reserves enough space to store the specified number of bytes."}],"kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(_:)","type":"topic","title":"reserveCapacity(_:)","role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/shrinkBufferCapacity(to:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/shrinkbuffercapacity(to:)","title":"shrinkBufferCapacity(to:)","role":"symbol","abstract":[{"type":"text","text":"The "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" will successfully be shrunk if the requested capacity is less than the current capacity,"},{"type":"text","text":" "},{"type":"text","text":"and the requested capacity is greater than or equal to the number of readable bytes in the buffer."},{"type":"text","text":" "},{"type":"text","text":"If either condition is not true, the buffer will not be shrunk."}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shrinkBufferCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytes(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","title":"withUnsafeReadableBytes(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebytes(_:)","abstract":[{"text":"Yields a buffer pointer containing this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"’s readable bytes.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeReadableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"kind":"symbol","abstract":[{"text":"Yields the bytes currently writable (","type":"text"},{"type":"codeVoice","code":"bytesWritable"},{"text":" = ","type":"text"},{"type":"codeVoice","code":"capacity"},{"text":" - ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":"). Before reading those bytes you must first"},{"type":"text","text":" "},{"type":"text","text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged."}],"title":"withUnsafeMutableWritableBytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeMutableWritableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablewritablebytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s9UnmanagedV","text":"Unmanaged","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s9AnyObjecta","text":"AnyObject","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","abstract":[{"type":"text","text":"See "},{"type":"codeVoice","code":"withUnsafeReadableBytesWithStorageManagement"},{"type":"text","text":" and "},{"type":"codeVoice","code":"withVeryUnsafeBytes"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)","title":"withVeryUnsafeBytesWithStorageManagement(_:)","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4":{"url":"\/documentation\/sotosignerv4","type":"topic","kind":"symbol","title":"SotoSignerV4","role":"collection","abstract":[{"type":"text","text":"Sign HTTP requests before sending them to AWS either by generating a signed URL or a set of signed headers."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4"},"doc://codes.soto.soto-core/s23CustomStringConvertibleP":{"identifier":"doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","type":"unresolvable","title":"Swift.CustomStringConvertible"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writableBytes":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","url":"\/documentation\/sotosignerv4\/bytebuffer\/writablebytes","title":"writableBytes","abstract":[{"type":"text","text":"The number of bytes writable until "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" will need to grow its underlying storage which will likely"},{"type":"text","text":" "},{"type":"text","text":"trigger a copy of the bytes."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"writableBytes","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-12w71":{"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-12w71","kind":"symbol","title":"clear(minimumCapacity:)","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"code":"0","type":"codeVoice"},{"type":"text","text":". This will reset the state of this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}]},"doc://codes.soto.soto-core/Se":{"title":"Swift.Decodable","type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/Se"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","title":"writeWithUnsafeMutableBytes(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(_:)","abstract":[],"deprecated":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writeWithUnsafeMutableBytes"},{"kind":"text","text":"(("},{"preciseIdentifier":"s:Sw","kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/storageCapacity":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","title":"storageCapacity","url":"\/documentation\/sotosignerv4\/bytebuffer\/storagecapacity","abstract":[{"text":"The current capacity of the underlying storage of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original","type":"text"},{"text":" ","type":"text"},{"text":"buffer until new data is written.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"storageCapacity","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableReadableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:Sw","kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","abstract":[{"type":"text","text":"Yields a mutable buffer pointer containing this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"’s readable bytes. You may modify those bytes."}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablereadablebytes(_:)","title":"withUnsafeMutableReadableBytes(_:)","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafemutablebytes(_:)","title":"withVeryUnsafeMutableBytes(_:)","abstract":[{"text":"This vends a pointer to the storage of the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":". It’s marked as ","type":"text"},{"inlineContent":[{"type":"text","text":"very unsafe"}],"type":"emphasis"},{"text":" because it might contain","type":"text"},{"text":" ","type":"text"},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"code":"withUnsafeMutableWritableBytes","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeMutableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://codes.soto.soto-core/s8SendableP":{"identifier":"doc:\/\/codes.soto.soto-core\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readerIndex":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/readerindex","type":"topic","kind":"symbol","title":"readerIndex","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readerIndex","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The reader index or the number of bytes previously read from this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","title":"reserveCapacity(minimumWritableBytes:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(minimumwritablebytes:)","abstract":[{"type":"text","text":"Reserves enough space to write at least the specified number of bytes."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumWritableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear()":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"title":"clear()","type":"topic","role":"symbol","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"type":"codeVoice","code":"0"},{"text":". This will reset the state of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/clear()"},"doc://codes.soto.soto-core/s28CustomDebugStringConvertibleP":{"title":"Swift.CustomDebugStringConvertible","type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP"},"doc://codes.soto.soto-core/SE":{"identifier":"doc:\/\/codes.soto.soto-core\/SE","type":"unresolvable","title":"Swift.Encodable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/peekSlice(length:)":{"kind":"symbol","title":"peekSlice(length:)","abstract":[{"type":"text","text":"Returns a slice of size "},{"code":"length","type":"codeVoice"},{"type":"text","text":" bytes, starting at the current "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":". The "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" this is invoked on"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" in this"},{"type":"text","text":" "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" will correspond to index "},{"code":"0","type":"codeVoice"},{"type":"text","text":" in the returned "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" of the returned "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" will be "},{"code":"0","type":"codeVoice"},{"type":"text","text":", the "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" will be "},{"code":"length","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/peekSlice(length:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"peekSlice","kind":"identifier"},{"text":"(","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/peekslice(length:)"},"doc://codes.soto.soto-core/SH":{"type":"unresolvable","identifier":"doc:\/\/codes.soto.soto-core\/SH","title":"Swift.Hashable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/capacity":{"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"capacity","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","abstract":[{"text":"The current capacity of the storage of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":", this is not constant and does ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" signify the number","type":"text"},{"text":" ","type":"text"},{"text":"of bytes that have been written to this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/capacity","title":"capacity","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writeWithUnsafeMutableBytes"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumWritableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","type":"topic","role":"symbol","abstract":[{"text":"This vends a pointer of the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" at the ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":" after ensuring that the buffer has at least ","type":"text"},{"code":"minimumWritableBytes","type":"codeVoice"},{"type":"text","text":" of writable bytes available."}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer":{"role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","url":"\/documentation\/sotosignerv4\/bytebuffer","kind":"symbol","type":"topic","title":"ByteBuffer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}]},"doc://codes.soto.soto-core/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/codes.soto.soto-core\/SQ","type":"unresolvable"}}}