{"topicSections":[{"anchor":"Instance-Properties","generated":true,"title":"Instance Properties","identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex"]},{"title":"Instance Methods","anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"]}],"kind":"symbol","identifier":{"url":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","interfaceLanguage":"swift"},"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"symbolKind":"struct","title":"ByteBuffer","roleHeading":"Structure","role":"symbol","externalID":"s:7NIOCore10ByteBufferV","modules":[{"name":"SotoSignerV4"}],"navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}]},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","doc:\/\/codes.soto.soto-core\/Se","doc:\/\/codes.soto.soto-core\/SE","doc:\/\/codes.soto.soto-core\/SQ","doc:\/\/codes.soto.soto-core\/SH","doc:\/\/codes.soto.soto-core\/s8SendableP"],"title":"Conforms To","type":"conformsTo"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"text":" ","type":"text"},{"type":"text","text":"more bytes (octets)."}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ByteBuffer"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"Allocation","text":"Allocation","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"allocator.buffer(capacity: desiredCapacity)"},{"text":" to allocate a new ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}]},{"text":"Basic usage","type":"heading","level":3,"anchor":"Basic-usage"},{"inlineContent":[{"text":"A variety of types can be read\/written from\/to a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":". Using Swift’s ","type":"text"},{"type":"codeVoice","code":"extension"},{"text":" mechanism you can easily","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"create "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" support for your own data types. Out of the box, "},{"code":"ByteBuffer","type":"codeVoice"},{"text":" supports for example the following","type":"text"},{"text":" ","type":"text"},{"text":"types (non-exhaustive list):","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"StaticString"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s various (unsigned) integer types"}]}]},{"content":[{"inlineContent":[{"code":"Foundation","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"Data","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"[UInt8]"},{"text":" and generally any ","type":"text"},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" of "},{"type":"codeVoice","code":"UInt8"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"The best and easiest way to read and convert "},{"type":"reference","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","isActive":true},{"text":" into a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":",  "},{"type":"codeVoice","code":"Array<UInt8>"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Data"},{"text":" is by","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passing the buffer to an initializer."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let buf = ...","let myString = String(buffer: buf)"]},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" provides APIs for reading its contents either sequentially ("},{"code":"read*","type":"codeVoice"},{"type":"text","text":" methods) or randomly ("},{"type":"codeVoice","code":"get*"},{"type":"text","text":" "},{"type":"text","text":"methods). All "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the readable"},{"text":" ","type":"text"},{"type":"text","text":"bytes of the buffer, i.e. "},{"type":"codeVoice","code":"readerIndex ..< writerIndex"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you need to loop over all the bytes in the buffer, you can use the ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":" conformance with ","type":"text"},{"type":"codeVoice","code":"readableBytesView"},{"type":"text","text":":"}]},{"type":"codeListing","code":["for byte in buffer.readableBytesView {","    print(byte)","}"],"syntax":null},{"inlineContent":[{"text":"If you need to process the whole buffer front to back, it’s recommended that you use sequential ","type":"text"},{"type":"codeVoice","code":"read*"},{"type":"text","text":" methods:"}],"type":"paragraph"},{"code":["while buffer.readableBytes > 0 {","    if let chunk = buffer.readBytes(length: min(chunkSize, buffer.readableBytes) {","        \/\/ work with the chunk of data","    } else {","        \/\/ fallback in case of buffer read error.","    }","}"],"syntax":null,"type":"codeListing"},{"type":"heading","anchor":"Random-Access","level":3,"text":"Random Access"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For every supported type "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" usually contains two methods for random access:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"get<Type>(at: Int, length: Int)"},{"text":" where ","type":"text"},{"code":"<type>","type":"codeVoice"},{"text":" is for example ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"code":"Data","type":"codeVoice"},{"type":"text","text":", "},{"code":"Bytes","type":"codeVoice"},{"type":"text","text":" (for "},{"type":"codeVoice","code":"[UInt8]"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"set<Type>(at: Int)"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":null,"code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed, "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will automatically resize its storage to accommodate your "},{"code":"set","type":"codeVoice"},{"text":" request.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If you need to access the contents of a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" with "},{"type":"codeVoice","code":"get*(at: index)"},{"type":"text","text":" methods, make sure that the"},{"type":"text","text":" "},{"type":"codeVoice","code":"index"},{"type":"text","text":" you’re passing in is within the readable bytes range. If you try to access an index outside"},{"type":"text","text":" "},{"type":"codeVoice","code":"readerIndex ..< writerIndex"},{"type":"text","text":" range, "},{"type":"codeVoice","code":"get*"},{"type":"text","text":" methods will return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". For most applications, initializing"},{"type":"text","text":" "},{"text":"the desired type with the contents of the buffer, or using one of the ","type":"text"},{"type":"codeVoice","code":"read*"},{"type":"text","text":" is a better approach."}]}],"name":"Note","type":"aside","style":"note"},{"type":"heading","level":3,"anchor":"Sequential-Access","text":"Sequential Access"},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" provides two properties which are indices into the "},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to support sequential access:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"readerIndex"},{"text":", the index of the next readable byte","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"writerIndex"},{"text":", the index of the next byte to write","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For every supported type "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" usually contains two methods for sequential access:"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"read<Type>(length: Int)"},{"text":" to read ","type":"text"},{"code":"length","type":"codeVoice"},{"type":"text","text":" bytes from the current "},{"type":"codeVoice","code":"readerIndex"},{"text":" (and then advance the reader","type":"text"},{"text":" ","type":"text"},{"text":"index by ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" bytes)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"write<Type>(Type)"},{"type":"text","text":" to write, advancing the "},{"type":"codeVoice","code":"writerIndex"},{"text":" by the appropriate amount","type":"text"}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"syntax":null,"type":"codeListing","code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"]},{"anchor":"Layout","text":"Layout","level":3,"type":"heading"},{"code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using"},{"text":" ","type":"text"},{"text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential","type":"text"},{"type":"text","text":" "},{"type":"text","text":"access interface ("},{"code":"read<Type>","type":"codeVoice"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"write<Type>"},{"type":"text","text":"). Getting "},{"type":"codeVoice","code":"writableBytes"},{"text":" (bytes beyond the writer index) is undefined","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"behaviour and might yield arbitrary bytes ("},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":" initialised)."}],"type":"paragraph"},{"anchor":"Slicing","type":"heading","text":"Slicing","level":3},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" supports slicing a "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" without copying the underlying storage."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":null,"code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"]}]}],"variants":[{"paths":["\/documentation\/sotosignerv4\/bytebuffer"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4"]]},"references":{"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readerIndex":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"readerIndex","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","role":"symbol","kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/readerindex","title":"readerIndex","abstract":[{"type":"text","text":"The reader index or the number of bytes previously read from this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/getSlice(at:length:)":{"kind":"symbol","abstract":[{"type":"text","text":"Returns a slice of size "},{"code":"length","type":"codeVoice"},{"type":"text","text":" bytes, starting at "},{"code":"index","type":"codeVoice"},{"type":"text","text":". The "},{"code":"ByteBuffer","type":"codeVoice"},{"text":" this is invoked on and the","type":"text"},{"type":"text","text":" "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"code":"index","type":"codeVoice"},{"type":"text","text":" in this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"will correspond to index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" in the returned "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"readerIndex"},{"text":" of the returned ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will be ","type":"text"},{"type":"codeVoice","code":"0"},{"text":", the ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":" will be ","type":"text"},{"type":"codeVoice","code":"length"},{"type":"text","text":"."}],"title":"getSlice(at:length:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/getslice(at:length:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"getSlice","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"length","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"text":"?","kind":"text"}],"role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer":{"kind":"symbol","title":"ByteBuffer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ByteBuffer"}],"abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"text":"more bytes (octets).","type":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear()":{"title":"clear()","role":"symbol","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"code":"0","type":"codeVoice"},{"type":"text","text":". This will reset the state of this "},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear()","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}]},"doc://codes.soto.soto-core/s28CustomDebugStringConvertibleP":{"title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-7qskn":{"kind":"symbol","deprecated":true,"abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"text":" to the state","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"title":"clear(minimumCapacity:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-7qskn","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"},{"text":")","kind":"text"}],"role":"symbol"},"doc://codes.soto.soto-core/Se":{"title":"Swift.Decodable","identifier":"doc:\/\/codes.soto.soto-core\/Se","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/discardReadBytes()":{"title":"discardReadBytes()","abstract":[{"type":"text","text":"Discard the bytes before the reader index. The byte at index "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" before calling this method will be"},{"type":"text","text":" "},{"type":"text","text":"at index "},{"code":"0","type":"codeVoice"},{"type":"text","text":" after the call returns."}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"discardReadBytes"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","url":"\/documentation\/sotosignerv4\/bytebuffer\/discardreadbytes()","type":"topic","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(_:)":{"role":"symbol","type":"topic","abstract":[{"text":"Reserves enough space to store the specified number of bytes.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","title":"reserveCapacity(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writerIndex":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex","role":"symbol","title":"writerIndex","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"writerIndex"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/writerindex","type":"topic","abstract":[{"text":"The write index or the number of bytes previously written to this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" is "},{"code":"0","type":"codeVoice"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"kind":"symbol","role":"symbol","title":"withUnsafeMutableReadableBytes(_:)","abstract":[{"type":"text","text":"Yields a mutable buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"text":"’s readable bytes. You may modify those bytes.","type":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withUnsafeMutableReadableBytes"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:Sw","kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablereadablebytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-12w71":{"title":"clear(minimumCapacity:)","kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-12w71","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"type":"codeVoice","code":"0"},{"text":". This will reset the state of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"type":"text","text":"for a new use-case."}],"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"minimumCapacity"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"title":"withUnsafeReadableBytesWithStorageManagement(_:)","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withUnsafeReadableBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV"},{"kind":"text","text":"<"},{"text":"AnyObject","kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"text":"Yields a buffer pointer containing this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"‘s readable bytes. You may hold a pointer to those bytes"},{"type":"text","text":" "},{"type":"text","text":"even after the closure returned iff you model the lifetime of those bytes correctly using the "},{"type":"codeVoice","code":"Unmanaged"},{"type":"text","text":" "},{"text":"instance. If you don’t require the pointer after the closure returns, use ","type":"text"},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"text":".","type":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","type":"topic","role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4":{"title":"SotoSignerV4","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4","kind":"symbol","role":"collection","url":"\/documentation\/sotosignerv4","abstract":[{"text":"Sign HTTP requests before sending them to AWS either by generating a signed URL or a set of signed headers.","type":"text"}],"type":"topic"},"doc://codes.soto.soto-core/s23CustomStringConvertibleP":{"identifier":"doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible","type":"unresolvable"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"title":"withUnsafeMutableWritableBytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withUnsafeMutableWritableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Yields the bytes currently writable ("},{"type":"codeVoice","code":"bytesWritable"},{"type":"text","text":" = "},{"code":"capacity","type":"codeVoice"},{"text":" - ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":"). Before reading those bytes you must first","type":"text"},{"type":"text","text":" "},{"text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged.","type":"text"}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablewritablebytes(_:)","role":"symbol"},"doc://codes.soto.soto-core/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/codes.soto.soto-core\/SQ"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/capacity":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"capacity","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","role":"symbol","kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/capacity","title":"capacity","abstract":[{"type":"text","text":"The current capacity of the storage of this "},{"code":"ByteBuffer","type":"codeVoice"},{"text":", this is not constant and does ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" signify the number"},{"type":"text","text":" "},{"type":"text","text":"of bytes that have been written to this "},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"title":"withVeryUnsafeMutableBytes(_:)","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeMutableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"text":"This vends a pointer to the storage of the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":". It’s marked as "},{"inlineContent":[{"type":"text","text":"very unsafe"}],"type":"emphasis"},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use ","type":"text"},{"code":"withUnsafeMutableWritableBytes","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafemutablebytes(_:)","type":"topic","role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/shrinkBufferCapacity(to:)":{"kind":"symbol","type":"topic","abstract":[{"text":"The ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" will successfully be shrunk if the requested capacity is less than the current capacity,"},{"text":" ","type":"text"},{"type":"text","text":"and the requested capacity is greater than or equal to the number of readable bytes in the buffer."},{"type":"text","text":" "},{"type":"text","text":"If either condition is not true, the buffer will not be shrunk."}],"role":"symbol","title":"shrinkBufferCapacity(to:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/shrinkbuffercapacity(to:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"shrinkBufferCapacity","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"kind":"symbol","abstract":[{"text":"This vends a pointer of the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" at the ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" after ensuring that the buffer has at least "},{"code":"minimumWritableBytes","type":"codeVoice"},{"type":"text","text":" of writable bytes available."}],"title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumWritableBytes","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writableBytes":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","role":"symbol","title":"writableBytes","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"writableBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/writablebytes","type":"topic","abstract":[{"text":"The number of bytes writable until ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will need to grow its underlying storage which will likely","type":"text"},{"text":" ","type":"text"},{"text":"trigger a copy of the bytes.","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"role":"symbol","type":"topic","abstract":[{"text":"Reserves enough space to write at least the specified number of bytes.","type":"text"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reserveCapacity","kind":"identifier"},{"kind":"text","text":"("},{"text":"minimumWritableBytes","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","title":"reserveCapacity(minimumWritableBytes:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(minimumwritablebytes:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","role":"symbol","title":"withVeryUnsafeBytesWithStorageManagement(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"withVeryUnsafeBytesWithStorageManagement","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","preciseIdentifier":"s:SW","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV"},{"text":"<","kind":"text"},{"text":"AnyObject","preciseIdentifier":"s:s9AnyObjecta","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)","type":"topic","abstract":[{"text":"See ","type":"text"},{"type":"codeVoice","code":"withUnsafeReadableBytesWithStorageManagement"},{"type":"text","text":" and "},{"code":"withVeryUnsafeBytes","type":"codeVoice"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","role":"symbol","deprecated":true,"kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(_:)","title":"writeWithUnsafeMutableBytes(_:)","abstract":[],"type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytes(_:)":{"title":"withVeryUnsafeBytes(_:)","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"This vends a pointer to the storage of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". It’s marked as "},{"inlineContent":[{"text":"very unsafe","type":"text"}],"type":"emphasis"},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"type":"text","text":"."}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebytes(_:)","type":"topic","role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readableBytes":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"readableBytes","kind":"identifier"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","role":"symbol","kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/readablebytes","title":"readableBytes","abstract":[{"type":"text","text":"The number of bytes readable ("},{"type":"codeVoice","code":"readableBytes"},{"type":"text","text":" = "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":" - "},{"code":"readerIndex","type":"codeVoice"},{"text":").","type":"text"}],"type":"topic"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytes(_:)":{"abstract":[{"text":"Yields a buffer pointer containing this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":"’s readable bytes.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withUnsafeReadableBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:SW","kind":"typeIdentifier","text":"UnsafeRawBufferPointer"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"title":"withUnsafeReadableBytes(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/storageCapacity":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","title":"storageCapacity","abstract":[{"text":"The current capacity of the underlying storage of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original","type":"text"},{"text":" ","type":"text"},{"text":"buffer until new data is written.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/storagecapacity","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"storageCapacity","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"role":"symbol"},"doc://codes.soto.soto-core/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/codes.soto.soto-core\/s8SendableP","type":"unresolvable"},"doc://codes.soto.soto-core/SE":{"title":"Swift.Encodable","identifier":"doc:\/\/codes.soto.soto-core\/SE","type":"unresolvable"},"doc://codes.soto.soto-core/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/codes.soto.soto-core\/SH","type":"unresolvable"}}}