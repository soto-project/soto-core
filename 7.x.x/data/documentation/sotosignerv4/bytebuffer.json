{"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"text":" ","type":"text"},{"type":"text","text":"more bytes (octets)."}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ByteBuffer"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"Allocation","level":3,"text":"Allocation","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"allocator.buffer(capacity: desiredCapacity)"},{"type":"text","text":" to allocate a new "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}]},{"level":3,"type":"heading","text":"Basic usage","anchor":"Basic-usage"},{"inlineContent":[{"type":"text","text":"A variety of types can be read\/written from\/to a "},{"type":"codeVoice","code":"ByteBuffer"},{"text":". Using Swift’s ","type":"text"},{"type":"codeVoice","code":"extension"},{"type":"text","text":" mechanism you can easily"},{"type":"text","text":" "},{"text":"create ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" support for your own data types. Out of the box, ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" supports for example the following","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"types (non-exhaustive list):"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"String"},{"text":"\/","type":"text"},{"code":"StaticString","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s various (unsigned) integer types","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"Foundation","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"Data","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"[UInt8]","type":"codeVoice"},{"type":"text","text":" and generally any "},{"type":"codeVoice","code":"Collection"},{"text":" of ","type":"text"},{"type":"codeVoice","code":"UInt8"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"The best and easiest way to read and convert ","type":"text"},{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","type":"reference","isActive":true},{"type":"text","text":" into a "},{"type":"codeVoice","code":"String"},{"type":"text","text":",  "},{"type":"codeVoice","code":"Array<UInt8>"},{"type":"text","text":", or "},{"code":"Data","type":"codeVoice"},{"text":" is by","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"passing the buffer to an initializer."}]},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let buf = ...","let myString = String(buffer: buf)"]},{"inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" provides APIs for reading its contents either sequentially ("},{"code":"read*","type":"codeVoice"},{"type":"text","text":" methods) or randomly ("},{"code":"get*","type":"codeVoice"},{"type":"text","text":" "},{"text":"methods). All ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" methods that don’t contain the word ‘unsafe’ will only allow you to access the readable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"bytes of the buffer, i.e. "},{"code":"readerIndex ..< writerIndex","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If you need to loop over all the bytes in the buffer, you can use the ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":" conformance with ","type":"text"},{"code":"readableBytesView","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":null,"type":"codeListing","code":["for byte in buffer.readableBytesView {","    print(byte)","}"]},{"type":"paragraph","inlineContent":[{"text":"If you need to process the whole buffer front to back, it’s recommended that you use sequential ","type":"text"},{"code":"read*","type":"codeVoice"},{"type":"text","text":" methods:"}]},{"type":"codeListing","code":["while buffer.readableBytes > 0 {","    if let chunk = buffer.readBytes(length: min(chunkSize, buffer.readableBytes) {","        \/\/ work with the chunk of data","    } else {","        \/\/ fallback in case of buffer read error.","    }","}"],"syntax":null},{"type":"heading","anchor":"Random-Access","level":3,"text":"Random Access"},{"type":"paragraph","inlineContent":[{"text":"For every supported type ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" usually contains two methods for random access:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"get<Type>(at: Int, length: Int)"},{"type":"text","text":" where "},{"code":"<type>","type":"codeVoice"},{"type":"text","text":" is for example "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"code":"Data","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Bytes"},{"type":"text","text":" (for "},{"code":"[UInt8]","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"set<Type>(at: Int)","type":"codeVoice"}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"syntax":null,"code":["var buf = ...","buf.setString(\"Hello World\", at: 0)","buf.moveWriterIndex(to: 11)","let helloWorld = buf.getString(at: 0, length: 11)","","let written = buf.setInteger(17 as Int, at: 11)","buf.moveWriterIndex(forwardBy: written)","let seventeen: Int? = buf.getInteger(at: 11)"],"type":"codeListing"},{"inlineContent":[{"text":"If needed, ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will automatically resize its storage to accommodate your "},{"code":"set","type":"codeVoice"},{"text":" request.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"If you need to access the contents of a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" with "},{"type":"codeVoice","code":"get*(at: index)"},{"type":"text","text":" methods, make sure that the"},{"type":"text","text":" "},{"code":"index","type":"codeVoice"},{"text":" you’re passing in is within the readable bytes range. If you try to access an index outside","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"readerIndex ..< writerIndex"},{"type":"text","text":" range, "},{"type":"codeVoice","code":"get*"},{"text":" methods will return ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":". For most applications, initializing"},{"text":" ","type":"text"},{"type":"text","text":"the desired type with the contents of the buffer, or using one of the "},{"code":"read*","type":"codeVoice"},{"text":" is a better approach.","type":"text"}]}],"name":"Note","style":"note","type":"aside"},{"level":3,"text":"Sequential Access","anchor":"Sequential-Access","type":"heading"},{"type":"paragraph","inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" provides two properties which are indices into the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to support sequential access:"}]},{"items":[{"content":[{"inlineContent":[{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":", the index of the next readable byte"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"writerIndex"},{"text":", the index of the next byte to write","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"For every supported type "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" usually contains two methods for sequential access:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"read<Type>(length: Int)"},{"type":"text","text":" to read "},{"code":"length","type":"codeVoice"},{"type":"text","text":" bytes from the current "},{"code":"readerIndex","type":"codeVoice"},{"text":" (and then advance the reader","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"index by "},{"code":"length","type":"codeVoice"},{"type":"text","text":" bytes)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"write<Type>(Type)"},{"text":" to write, advancing the ","type":"text"},{"code":"writerIndex","type":"codeVoice"},{"text":" by the appropriate amount","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"syntax":null,"code":[" var buf = ..."," buf.writeString(\"Hello World\")"," buf.writeInteger(17 as Int)"," let helloWorld = buf.readString(length: 11)"," let seventeen: Int = buf.readInteger()"],"type":"codeListing"},{"type":"heading","level":3,"anchor":"Layout","text":"Layout"},{"type":"codeListing","syntax":null,"code":["+-------------------+------------------+------------------+","| discardable bytes |  readable bytes  |  writable bytes  |","|                   |     (CONTENT)    |                  |","+-------------------+------------------+------------------+","|                   |                  |                  |","0      <=      readerIndex   <=   writerIndex    <=    capacity"]},{"inlineContent":[{"type":"text","text":"The ‘discardable bytes’ are usually bytes that have already been read, they can however still be accessed using"},{"text":" ","type":"text"},{"type":"text","text":"the random access methods. ‘Readable bytes’ are the bytes currently available to be read using the sequential"},{"type":"text","text":" "},{"text":"access interface (","type":"text"},{"code":"read<Type>","type":"codeVoice"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"write<Type>"},{"text":"). Getting ","type":"text"},{"code":"writableBytes","type":"codeVoice"},{"type":"text","text":" (bytes beyond the writer index) is undefined"},{"text":" ","type":"text"},{"type":"text","text":"behaviour and might yield arbitrary bytes ("},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"0"},{"type":"text","text":" initialised)."}],"type":"paragraph"},{"text":"Slicing","level":3,"anchor":"Slicing","type":"heading"},{"inlineContent":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" supports slicing a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" without copying the underlying storage."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"code":["var buf = ...","let dataBytes: [UInt8] = [0xca, 0xfe, 0xba, 0xbe]","let dataBytesLength = UInt32(dataBytes.count)","buf.writeInteger(dataBytesLength) \/* the header *\/","buf.writeBytes(dataBytes) \/* the data *\/","let bufDataBytesOnly = buf.getSlice(at: 4, length: dataBytes.count)","\/* `bufDataByteOnly` and `buf` will share their storage *\/"],"type":"codeListing","syntax":null}]}],"sections":[],"relationshipsSections":[{"identifiers":["doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP","doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP","doc:\/\/codes.soto.soto-core\/Se","doc:\/\/codes.soto.soto-core\/SE","doc:\/\/codes.soto.soto-core\/SQ","doc:\/\/codes.soto.soto-core\/SH","doc:\/\/codes.soto.soto-core\/s8SendableP"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"variants":[{"paths":["\/documentation\/sotosignerv4\/bytebuffer"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4"]]},"topicSections":[{"title":"Instance Properties","generated":true,"identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex"],"anchor":"Instance-Properties"},{"identifiers":["doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"],"anchor":"Instance-Methods","title":"Instance Methods","generated":true}],"metadata":{"title":"ByteBuffer","roleHeading":"Structure","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"modules":[{"name":"SotoSignerV4"}],"externalID":"s:7NIOCore10ByteBufferV"},"identifier":{"url":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","interfaceLanguage":"swift"},"references":{"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)":{"title":"writeWithUnsafeMutableBytes(minimumWritableBytes:_:)","abstract":[{"type":"text","text":"This vends a pointer of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" at the "},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" after ensuring that the buffer has at least "},{"type":"codeVoice","code":"minimumWritableBytes"},{"text":" of writable bytes available.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"writeWithUnsafeMutableBytes"},{"text":"(","kind":"text"},{"text":"minimumWritableBytes","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":", (","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(minimumWritableBytes:_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeMutableBytes(_:)":{"title":"withVeryUnsafeMutableBytes(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeMutableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafemutablebytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeMutableBytes(_:)","type":"topic","abstract":[{"text":"This vends a pointer to the storage of the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":". It’s marked as ","type":"text"},{"inlineContent":[{"type":"text","text":"very unsafe"}],"type":"emphasis"},{"text":" because it might contain","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"type":"codeVoice","code":"withUnsafeMutableWritableBytes"},{"type":"text","text":"."}],"kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/shrinkBufferCapacity(to:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"shrinkBufferCapacity"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/shrinkbuffercapacity(to:)","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/shrinkBufferCapacity(to:)","role":"symbol","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will successfully be shrunk if the requested capacity is less than the current capacity,"},{"text":" ","type":"text"},{"type":"text","text":"and the requested capacity is greater than or equal to the number of readable bytes in the buffer."},{"type":"text","text":" "},{"type":"text","text":"If either condition is not true, the buffer will not be shrunk."}],"title":"shrinkBufferCapacity(to:)"},"doc://codes.soto.soto-core/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/codes.soto.soto-core\/s8SendableP"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/storageCapacity":{"role":"symbol","title":"storageCapacity","kind":"symbol","abstract":[{"type":"text","text":"The current capacity of the underlying storage of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A COW slice of the buffer (e.g. readSlice(length: x)) will posses the same storageCapacity as the original"},{"type":"text","text":" "},{"type":"text","text":"buffer until new data is written."}],"type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/storageCapacity","url":"\/documentation\/sotosignerv4\/bytebuffer\/storagecapacity","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"storageCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writerIndex":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/writerindex","title":"writerIndex","type":"topic","abstract":[{"text":"The write index or the number of bytes previously written to this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":". ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" is "},{"code":"0","type":"codeVoice"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"newly allocated "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writerIndex","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"writerIndex","kind":"identifier"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4","type":"topic","kind":"symbol","title":"SotoSignerV4","url":"\/documentation\/sotosignerv4","abstract":[{"type":"text","text":"Sign HTTP requests before sending them to AWS either by generating a signed URL or a set of signed headers."}],"role":"collection"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readerIndex":{"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"readerIndex","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readerIndex","url":"\/documentation\/sotosignerv4\/bytebuffer\/readerindex","kind":"symbol","role":"symbol","title":"readerIndex","abstract":[{"text":"The reader index or the number of bytes previously read from this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" is "},{"code":"0","type":"codeVoice"},{"type":"text","text":" for a"},{"text":" ","type":"text"},{"text":"newly allocated ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}]},"doc://codes.soto.soto-core/s23CustomStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomStringConvertible","identifier":"doc:\/\/codes.soto.soto-core\/s23CustomStringConvertibleP"},"doc://codes.soto.soto-core/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/codes.soto.soto-core\/SQ"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer":{"url":"\/documentation\/sotosignerv4\/bytebuffer","title":"ByteBuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"type":"topic","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ByteBuffer","kind":"identifier"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableReadableBytes(_:)":{"title":"withUnsafeMutableReadableBytes(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablereadablebytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableReadableBytes(_:)","abstract":[{"type":"text","text":"Yields a mutable buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes. You may modify those bytes."}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeMutableReadableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:Sw","kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/readableBytes":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/readablebytes","title":"readableBytes","kind":"symbol","type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/readableBytes","abstract":[{"type":"text","text":"The number of bytes readable ("},{"type":"codeVoice","code":"readableBytes"},{"text":" = ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"type":"text","text":" - "},{"type":"codeVoice","code":"readerIndex"},{"text":").","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readableBytes","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytesWithStorageManagement(_:)":{"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytesWithStorageManagement(_:)","kind":"symbol","abstract":[{"type":"text","text":"See "},{"type":"codeVoice","code":"withUnsafeReadableBytesWithStorageManagement"},{"text":" and ","type":"text"},{"code":"withVeryUnsafeBytes","type":"codeVoice"},{"text":".","type":"text"}],"title":"withVeryUnsafeBytesWithStorageManagement(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withVeryUnsafeBytesWithStorageManagement","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s9AnyObjecta","kind":"typeIdentifier","text":"AnyObject"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytesWithStorageManagement(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytesWithStorageManagement(_:)","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"‘s readable bytes. You may hold a pointer to those bytes"},{"type":"text","text":" "},{"text":"even after the closure returned iff you model the lifetime of those bytes correctly using the ","type":"text"},{"type":"codeVoice","code":"Unmanaged"},{"type":"text","text":" "},{"text":"instance. If you don’t require the pointer after the closure returns, use ","type":"text"},{"type":"codeVoice","code":"withUnsafeReadableBytes"},{"type":"text","text":"."}],"title":"withUnsafeReadableBytesWithStorageManagement(_:)","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytesWithStorageManagement","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Unmanaged","preciseIdentifier":"s:s9UnmanagedV"},{"text":"<","kind":"text"},{"text":"AnyObject","preciseIdentifier":"s:s9AnyObjecta","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-12w71":{"type":"topic","abstract":[{"text":"Set both reader index and writer index to ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-12w71","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"kind":"symbol","role":"symbol","title":"clear(minimumCapacity:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-12w71"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writableBytes":{"kind":"symbol","title":"writableBytes","url":"\/documentation\/sotosignerv4\/bytebuffer\/writablebytes","type":"topic","abstract":[{"type":"text","text":"The number of bytes writable until "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will need to grow its underlying storage which will likely"},{"text":" ","type":"text"},{"text":"trigger a copy of the bytes.","type":"text"}],"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writableBytes","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"writableBytes","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"role":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/discardReadBytes()":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"discardReadBytes","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/discardReadBytes()","url":"\/documentation\/sotosignerv4\/bytebuffer\/discardreadbytes()","role":"symbol","abstract":[{"text":"Discard the bytes before the reader index. The byte at index ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" before calling this method will be"},{"type":"text","text":" "},{"type":"text","text":"at index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" after the call returns."}],"title":"discardReadBytes()"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeMutableWritableBytes(_:)":{"abstract":[{"text":"Yields the bytes currently writable (","type":"text"},{"code":"bytesWritable","type":"codeVoice"},{"text":" = ","type":"text"},{"type":"codeVoice","code":"capacity"},{"type":"text","text":" - "},{"code":"writerIndex","type":"codeVoice"},{"type":"text","text":"). Before reading those bytes you must first"},{"text":" ","type":"text"},{"type":"text","text":"write to them otherwise you will trigger undefined behaviour. The writer index will remain unchanged."}],"type":"topic","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafemutablewritablebytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withUnsafeMutableWritableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","role":"symbol","title":"withUnsafeMutableWritableBytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeMutableWritableBytes(_:)"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear()":{"type":"topic","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"title":"clear()","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear()","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"clear"},{"text":"()","kind":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/clear()"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(_:)":{"title":"reserveCapacity(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")"}],"type":"topic","abstract":[{"type":"text","text":"Reserves enough space to store the specified number of bytes."}],"kind":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(_:)","url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(_:)","role":"symbol"},"doc://codes.soto.soto-core/SE":{"type":"unresolvable","title":"Swift.Encodable","identifier":"doc:\/\/codes.soto.soto-core\/SE"},"doc://codes.soto.soto-core/s28CustomDebugStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/codes.soto.soto-core\/s28CustomDebugStringConvertibleP"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withUnsafeReadableBytes(_:)":{"role":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/withunsafereadablebytes(_:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withUnsafeReadableBytes(_:)","type":"topic","kind":"symbol","title":"withUnsafeReadableBytes(_:)","abstract":[{"type":"text","text":"Yields a buffer pointer containing this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s readable bytes."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeReadableBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/clear(minimumCapacity:)-7qskn":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/clear(minimumcapacity:)-7qskn","role":"symbol","deprecated":true,"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/clear(minimumCapacity:)-7qskn","abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"title":"clear(minimumCapacity:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"minimumCapacity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/withVeryUnsafeBytes(_:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/withveryunsafebytes(_:)","role":"symbol","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/withVeryUnsafeBytes(_:)","abstract":[{"text":"This vends a pointer to the storage of the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":". It’s marked as "},{"type":"emphasis","inlineContent":[{"text":"very unsafe","type":"text"}]},{"type":"text","text":" because it might contain"},{"type":"text","text":" "},{"type":"text","text":"uninitialised memory and it’s undefined behaviour to read it. In most cases you should use "},{"code":"withUnsafeReadableBytes","type":"codeVoice"},{"type":"text","text":"."}],"title":"withVeryUnsafeBytes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withVeryUnsafeBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:SW","kind":"typeIdentifier","text":"UnsafeRawBufferPointer"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"type":"topic","kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/writeWithUnsafeMutableBytes(_:)":{"identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/writeWithUnsafeMutableBytes(_:)","kind":"symbol","title":"writeWithUnsafeMutableBytes(_:)","role":"symbol","abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"writeWithUnsafeMutableBytes","kind":"identifier"},{"text":"((","kind":"text"},{"preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/writewithunsafemutablebytes(_:)","deprecated":true},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/capacity":{"role":"symbol","type":"topic","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/capacity","kind":"symbol","url":"\/documentation\/sotosignerv4\/bytebuffer\/capacity","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"capacity"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"title":"capacity","abstract":[{"text":"The current capacity of the storage of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", this is not constant and does ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" signify the number"},{"text":" ","type":"text"},{"text":"of bytes that have been written to this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}]},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/getSlice(at:length:)":{"title":"getSlice(at:length:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"getSlice"},{"kind":"text","text":"("},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier","text":"ByteBuffer"},{"text":"?","kind":"text"}],"url":"\/documentation\/sotosignerv4\/bytebuffer\/getslice(at:length:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/getSlice(at:length:)","type":"topic","abstract":[{"type":"text","text":"Returns a slice of size "},{"type":"codeVoice","code":"length"},{"type":"text","text":" bytes, starting at "},{"code":"index","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" this is invoked on and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" returned will share the same underlying storage. However, the byte at "},{"type":"codeVoice","code":"index"},{"type":"text","text":" in this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"text":"will correspond to index ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":" in the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" of the returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will be "},{"code":"0","type":"codeVoice"},{"text":", the ","type":"text"},{"type":"codeVoice","code":"writerIndex"},{"text":" will be ","type":"text"},{"type":"codeVoice","code":"length"},{"type":"text","text":"."}],"kind":"symbol"},"doc://codes.soto.soto-core/documentation/SotoSignerV4/ByteBuffer/reserveCapacity(minimumWritableBytes:)":{"url":"\/documentation\/sotosignerv4\/bytebuffer\/reservecapacity(minimumwritablebytes:)","identifier":"doc:\/\/codes.soto.soto-core\/documentation\/SotoSignerV4\/ByteBuffer\/reserveCapacity(minimumWritableBytes:)","abstract":[{"type":"text","text":"Reserves enough space to write at least the specified number of bytes."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"reserveCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"minimumWritableBytes"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":")","kind":"text"}],"type":"topic","title":"reserveCapacity(minimumWritableBytes:)"},"doc://codes.soto.soto-core/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/codes.soto.soto-core\/SH"},"doc://codes.soto.soto-core/Se":{"type":"unresolvable","title":"Swift.Decodable","identifier":"doc:\/\/codes.soto.soto-core\/Se"}}}