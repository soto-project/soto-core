//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-core/scripts/generate-errors.swift. DO NOT EDIT.

import NIOHTTP1

public struct AWSClientError: AWSErrorType {
    enum Code: String {
        case accessDenied = "AccessDenied"
        case incompleteSignature = "IncompleteSignature"
        case invalidAction = "InvalidAction"
        case invalidClientTokenId = "InvalidClientTokenId"
        case invalidParameterCombination = "InvalidParameterCombination"
        case invalidParameterValue = "InvalidParameterValue"
        case invalidQueryParameter = "InvalidQueryParameter"
        case invalidSignature = "InvalidSignature"
        case malformedQueryString = "MalformedQueryString"
        case missingAction = "MissingAction"
        case missingAuthenticationToken = "MissingAuthenticationToken"
        case missingParameter = "MissingParameter"
        case optInRequired = "OptInRequired"
        case requestExpired = "RequestExpired"
        case signatureDoesNotMatch = "SignatureDoesNotMatch"
        case throttling = "Throttling"
        case unrecognizedClient = "UnrecognizedClient"
        case validationError = "ValidationError"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize AWSClientError
    public init?(errorCode: String, context: AWSErrorContext) {
        var errorCode = errorCode
        // remove "Exception" suffix
        if errorCode.hasSuffix("Exception") {
            errorCode = String(errorCode.dropLast(9))
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: AWSErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    // Access has been denied.
    public static var accessDenied: AWSClientError { .init(.accessDenied) }
    // The request signature does not conform to AWS standards.
    public static var incompleteSignature: AWSClientError { .init(.incompleteSignature) }
    // The action or operation requested is not valid. Verify that the action is typed correctly.
    public static var invalidAction: AWSClientError { .init(.invalidAction) }
    // The X.509 certificate or AWS access key ID provided does not exist in our records.
    public static var invalidClientTokenId: AWSClientError { .init(.invalidClientTokenId) }
    // Indicates an incorrect combination of parameters, or a missing parameter. For example, trying to terminate an instance without specifying the instance ID.
    public static var invalidParameterCombination: AWSClientError { .init(.invalidParameterCombination) }
    // A value specified in a parameter is not valid, is unsupported, or cannot be used. Ensure that you specify a resource by using its full ID. The returned message provides an explanation of the error value.
    public static var invalidParameterValue: AWSClientError { .init(.invalidParameterValue) }
    // The AWS query string is malformed or does not adhere to AWS standards.
    public static var invalidQueryParameter: AWSClientError { .init(.invalidQueryParameter) }
    // Authorization signature is invalid.
    public static var invalidSignature: AWSClientError { .init(.invalidSignature) }
    // The query string contains a syntax error.
    public static var malformedQueryString: AWSClientError { .init(.malformedQueryString) }
    // The request is missing an action or a required parameter.
    public static var missingAction: AWSClientError { .init(.missingAction) }
    // The request must contain either a valid (registered) AWS access key ID or X.509 certificate.
    public static var missingAuthenticationToken: AWSClientError { .init(.missingAuthenticationToken) }
    // The request is missing a required parameter. Ensure that you have supplied all the required parameters for the request; for example, the resource ID.
    public static var missingParameter: AWSClientError { .init(.missingParameter) }
    // You are not authorized to use the requested service. Ensure that you have subscribed to the service you are trying to use. If you are new to AWS, your account might take some time to be activated while your credit card details are being verified.
    public static var optInRequired: AWSClientError { .init(.optInRequired) }
    // The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future. If you're using temporary security credentials, this error can also occur if the credentials have expired. For more information, see Temporary Security Credentials in the IAM User Guide.
    public static var requestExpired: AWSClientError { .init(.requestExpired) }
    // Authorization signature does not match the signature provided.
    public static var signatureDoesNotMatch: AWSClientError { .init(.signatureDoesNotMatch) }
    // The request was denied due to request throttling.
    public static var throttling: AWSClientError { .init(.throttling) }
    // AWS access key ID provided does not exist in our records.
    public static var unrecognizedClient: AWSClientError { .init(.unrecognizedClient) }
    // The input fails to satisfy the constraints specified by an AWS service.
    public static var validationError: AWSClientError { .init(.validationError) }
}

extension AWSClientError: Equatable {
    public static func == (lhs: AWSClientError, rhs: AWSClientError) -> Bool {
        lhs.error == rhs.error
    }
}

extension AWSClientError: CustomStringConvertible {
    public var description: String {
        "\(self.error.rawValue): \(message ?? "")"
    }
}
