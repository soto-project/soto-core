//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2022 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-core/scripts/generate-region-tests.swift. DO NOT EDIT.
 
import SotoCore
import XCTest

class RegionTests: XCTestCase {

    private func testStringToOneRegion(regionName: String, regionEnum: Region) {
        let region = Region(awsRegionName: regionName)
        XCTAssertNotNil(region)
        XCTAssert(region! == regionEnum)
    }
    
    func testStringToRegion() {
        
{%for region in regions %}
        self.testStringToOneRegion(regionName: "{{region.name}}", regionEnum: Region.{{region.enum}})
{%endfor %}
    }

    func testStringToInvalidRegion() {
        XCTAssertNil(Region(awsRegionName: "xxx"))
    }
    
    func testRegionEnumRawValue() {
        let region = Region(rawValue: "my-region")
        if Region.other("my-region") == region {
            XCTAssertEqual(region.rawValue, "my-region")
        } else {
            XCTFail("Did not construct Region.other()")
        }
    }

    func testRegionEnumExistingRegion() {
        var region : Region
        
{%for region in regions %}
        region = Region(rawValue: "{{region.name}}")
        if Region.{{region.enum}} == region {
            XCTAssertEqual(region.rawValue, "{{region.name}}")
        } else {
            XCTFail("Did not construct Region(rawValue:) for {{region.name}}")
        }
        
{%endfor %}
    }
}
