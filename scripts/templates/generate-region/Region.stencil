//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2022 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-core/scripts/generate-region.swift. DO NOT EDIT.

/// Enumeration for all AWS server regions
public struct Region: Sendable, RawRepresentable, Equatable {
    public var rawValue: String

    public init(rawValue: String) {
        self.rawValue = rawValue
    }

{%for region in regions %}
    // {{region.description}}
    public static var {{region.enum}}: Region { .init(rawValue: "{{region.name}}") }
{%endfor %}
    // other region
    public static func other(_ name: String) -> Region { .init(rawValue: name) }
}

extension Region {
    public var partition: AWSPartition {
        switch self {
{%for region in regions %}
        case .{{region.enum}}: return .{{region.partition}}
{%endfor %}
        default: return .aws
        }
    }
}

extension Region: CustomStringConvertible {
    public var description: String { self.rawValue }
}

extension Region: Codable {}

/// Enumeration for all AWS partitions
public struct AWSPartition: Sendable, RawRepresentable, Equatable, Hashable {
    enum InternalPartition: String {
{%for partition in partitions %}
        case {{partition.name}}
{%endfor %}
    }

    private var partition: InternalPartition

    public var rawValue: String { self.partition.rawValue }

    public init?(rawValue: String) {
        guard let partition = InternalPartition(rawValue: rawValue) else { return nil }
        self.partition = partition
    }

    private init(partition: InternalPartition) {
        self.partition = partition
    }

{%for partition in partitions %}
    // {{partition.description}}
    public static var {{partition.name}}: AWSPartition { .init(partition: .{{partition.name}}) }
{%endfor %}
}

extension AWSPartition {
    public var dnsSuffix: String {
        switch self.partition {
{%for partition in partitions %}
        case .{{partition.name}}: return "{{partition.dnsSuffix}}"
{%endfor %}
        }
    }

    public func defaultEndpoint(region: Region, service: String) -> String {
        switch self.partition {
{%for partition in partitions %}
        case .{{partition.name}}: return "{{partition.hostname}}"
{%endfor %}
        }
    }
}

// allows to create a Region from a String
// it will only create a Region if the provided
// region name is valid.
extension Region {
    public init?(awsRegionName: String) {
        self.init(rawValue: awsRegionName)
        switch self {
{%for region in regions %}
{%if forloop.first %}
        case .{{region.enum}},
{%endif %}
{%if not forloop.first and not forloop.last%}
            .{{region.enum}},
{%endif %}
{%if forloop.last %}
            .{{region.enum}}:
{%endif %}
{%endfor %}
            return
        default:
            return nil
        }
    }
}
